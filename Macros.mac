;--------------------Segmento de Macros--------------------
;Contiene una gran variedad de macros utilizados en los diferentes sub-programas


;-------------------------  MACRO #1  ----------------------------------
;Macro-1: leer stdin_termios.
;	Captura la configuracion del stdin
;	recibe 2 parametros:
;		%1 es el valor de stdin
;		%2 es el valor de termios
;-----------------------------------------------------------------------
%macro read_stdin_termios 2
        push rax
        push rbx
        push rcx
        push rdx

        mov eax, 36h
        mov ebx, %1
        mov ecx, 5401h
        mov edx, %2
        int 80h

        pop rdx
        pop rcx
        pop rbx
        pop rax
%endmacro
;------------------------- FIN DE MACRO --------------------------------



;-------------------------  MACRO #2  ----------------------------------
;Macro-2: escribir stdin_termios.
;	Captura la configuracion del stdin
;	recibe 2 parametros:
;		%1 es el valor de stdin
;		%2 es el valor de termios
;-----------------------------------------------------------------------
%macro write_stdin_termios 2
        push rax
        push rbx
        push rcx
        push rdx

        mov eax, 36h
        mov ebx, %1
        mov ecx, 5402h
        mov edx, %2
        int 80h

        pop rdx
        pop rcx
        pop rbx
        pop rax
%endmacro
;------------------------- FIN DE MACRO --------------------------------



;-------------------------  MACRO #3  ----------------------------------
;Macro-3: apagar el modo canonico.
;	Apaga el modo canonico del Kernel
;	recibe 2 parametros:
;		%1 es el valor de ICANON
;		%2 es el valor de termios
;-----------------------------------------------------------------------
%macro canonical_off 2
	;Se llama a la funcion que lee el estado actual del TERMIOS en STDIN
	;TERMIOS son los parametros de configuracion que usa Linux para STDIN
        read_stdin_termios stdin,termios

	;Se escribe el nuevo valor de ICANON en EAX, para apagar el modo canonico
        push rax
        mov eax, %1
        not eax
        and [%2 + 12], eax
        pop rax

	;Se escribe la nueva configuracion de TERMIOS
        write_stdin_termios stdin,termios
%endmacro
;------------------------- FIN DE MACRO --------------------------------



;-------------------------  MACRO #4  ----------------------------------
;Macro-4: encender el modo canonico.
;	Recupera el modo canonico del Kernel
;	recibe 2 parametros:
;		%1 es el valor de ICANON
;		%2 es el valor de termios
;-----------------------------------------------------------------------
%macro canonical_on 2

	;Se llama a la funcion que lee el estado actual del TERMIOS en STDIN
	;TERMIOS son los parametros de configuracion que usa Linux para STDIN
        read_stdin_termios stdin,termios

        ;Se escribe el nuevo valor de modo Canonico
        or dword [%2 + 12], %1

	;Se escribe la nueva configuracion de TERMIOS
        write_stdin_termios stdin,termios
%endmacro
;----------------------------------------------------



;-------------------------  MACRO #5  ----------------------------------
;Macro-5: print.
;	Imprime un mensaje que se pasa como parametro
;	Recibe 2 parametros de entrada:
;		%1 es la direccion del texto a imprimir
;		%2 es la cantidad de bytes a imprimir
;-----------------------------------------------------------------------
%macro print 2 	;recibe 2 parametros
        mov rax,1	;sys_write
        mov rdi,1	;std_out
        mov rsi,%1	;primer parametro: Texto
        mov rdx,%2	;segundo parametro: Tamano texto
        syscall
%endmacro
;------------------------- FIN DE MACRO --------------------------------



;-------------------------  MACRO #6  ----------------------------------
;Macro-6: read.
;	Lee un mensaje desde teclado y se almacena en la variable que se
;	pasa como parametro
;	Recibe 2 parametros de entrada:
;		%1 es la direccion de memoria donde se guarda el texto
;		%2 es la cantidad de bytes a guardar
;-----------------------------------------------------------------------
%macro read 2 	;recibe 2 parametros
        mov rax,0	;sys_read
        mov rdi,0	;std_input
        mov rsi,%1	;primer parametro: Variable
        mov rdx,%2	;segundo parametro: Tamano
        syscall
%endmacro
;------------------------- FIN DE MACRO --------------------------------



;-------------------------  MACRO #7  ----------------------------------
; Simon Whitehead, 2015

;    This program converts numbers into ASCII characters and
;    prints them to stdout.
;Imprimir enteros
;Modificado para ser utilizado como macro
;Dependencia funci√≥n divloop
%macro printInt 2
        mov rdi,%1	; Move the number to print into rax

        ;itoa
        push rbp
        mov rbp,rsp
        sub rsp,4		; allocate 4 bytes for our local string length counter

        mov rax,rdi		; Move the passed in argument to rax
        lea rdi,[%2+10]	; load the end address of the buffer (past the very end)
        mov rcx,10		; divisor
        mov [rbp-4],dword 0	; rbp-4 will contain 4 bytes representing the length of the string - start at zero

        call divloop
        leave

        ; Write the string returned in rax out to stdout
        mov rdi,rax		; The string pointer is returned in rax - move it to rdi for the function call
        mov rsi,rcx

        ;print  Args: (rdi: char*, rsi: int)
        mov rax,4
        mov rbx,1
        mov rcx,rdi
        mov rdx,rsi

        int 0x80

        ; Write the newline character to stdout
        mov rdi,10
        mov rsi,1

        ;print  Args: (rdi: char*, rsi: int)
        mov rax,4
        mov rbx,1
        mov rcx,rdi
        mov rdx,rsi

        int 0x80

; Exit
%endmacro
;---------------------------FIN DE MACRO--------------------------------------



;-------------------------  MACRO #8  ----------------------------------
;echo_off
;Esta es una funcion que sirve para apagar el modo echo en Linux
;Cuando el modo echo se apaga, Linux NO muestra en la pantalla la tecla que
;se acaba de presionar.
;
;recibe 2 parametros:
;		%1 es el valor de stdin
;		%2 es el valor de termios
%macro echo_off 2

	;Se llama a la funcion que lee el estado actual del TERMIOS en STDIN
	;TERMIOS son los parametros de configuracion que usa Linux para STDIN
        read_stdin_termios stdin,termios

        ;Se escribe el nuevo valor de ECHO en EAX para apagar el echo
        push rax
        mov eax, %1
        not eax
        and [%2+12], eax
        pop rax

	;Se escribe la nueva configuracion de TERMIOS
        write_stdin_termios stdin,termios
%endmacro
;---------------------------FIN DE MACRO--------------------------------------



;-------------------------  MACRO #9  ----------------------------------
;echo_on
;Esta es una funcion que sirve para encender el echo en Linux
;Cuando el echo se enciende, Linux muestra en la pantalla (stdout) cada tecla
;que se recibe del teclado (stdin)
;
;recibe 1 parametro:
;
;		%1 es el valor de termios

%macro echo_on 1

  ;Se llama a la funcion que lee el estado actual del TERMIOS en STDIN
  ;TERMIOS son los parametros de configuracion que usa Linux para STDIN
        read_stdin_termios stdin,termios

        ;Se escribe el nuevo valor de modo echo
        or dword [%1+12], ECHO

  ;Se escribe la nueva configuracion de TERMIOS
        write_stdin_termios stdin,termios
%endmacro
;---------------------------FIN DE MACRO--------------------------------------
;#######################################################################



;-------------------------  MACRO #10 ----------------------------------
;no recibe parametros
;es para terminar un programa x86_64.
;dalbc.
%macro exit 0
        mov rax, 60
        mov rdi, 0
        syscall
%endmacro
;---------------------------FIN DE MACRO--------------------------------------



;-------------------------  MACRO #11 ----------------------------------
;no recibe parametros
;imprime el string que esta en rax antes de su llamado
;no importa el tamano del string mientras el ultimo caracter sea '0'
;dalbc
%macro printstring 0
%%_printstring:
        push rax
        mov rbx, 0

%%_printloop:
        inc rax
        inc rbx
        mov cl, [rax]
        cmp cl, 0
        jne %%_printloop

        mov rax, 1
        mov rdi, 1
        pop rsi
        mov rdx, rbx
        syscall
%endmacro
;---------------------------FIN DE MACRO--------------------------------------



;-------------------------  MACRO #12 ----------------------------------
;recibe 2 parametros, el primero de 16 reserved bytes y el segundo de 8 reserved bytes
;imprime un numero entero de cualquier tamano
;Modificado a partir de: https://pastebin.com/PN2jKVae
;dalbc
%macro printnum 2
%%_printnum:
        mov rcx, %1
        mov rbx, 10
        mov [rcx], rbx
        inc rcx
        mov [%2], rcx

%%_printnumloop:
        mov rdx, 0
        mov rbx, 10
        div rbx
        push rax
        add rdx, 48

        mov rcx, [%2]
        mov [rcx], dl
        inc rcx
        mov [%2], rcx

        pop rax
        cmp rax, 0
        jne %%_printnumloop

%%_printnumloop2:
        mov rcx, [%2]

        mov rax, 1
        mov rdi, 1
        mov rsi, rcx
        mov rdx, 1
        syscall

        mov rcx, [%2]
        dec rcx
        mov [%2], rcx

        cmp rcx, %1
        jge %%_printnumloop2
%endmacro
;---------------------------FIN DE MACRO--------------------------------------



;-------------------------  MACRO #13 ----------------------------------
;al llamar este macro se guarda en eax la cantidad de nucleos del procesador
;dalbc
%macro cantnuc 0
        mov eax, 0xb
        mov ecx, 1
        cpuid
        mov r10d, ebx
        and ebx, 0x0000ffff
%endmacro
;---------------------------FIN DE MACRO--------------------------------------



;-------------------------  MACRO #14 ----------------------------------
;atoi: pasa de string a entero.
;convierte un "numero" que esta como string ascii (tomado de consola) en un entero
;es decir, toma un numero de consola (que en realidad es un string) y lo convierte en un numero entero
;convierte el string que esta almacenado en rax inmediatamente antes de su llamada.
;Modificado a partir de: http://asmtutor.com/#lesson16
;dalbc
%macro atoi 0
        push    rbx             ; preserve ebx on the stack to be restored after function runs
        push    rcx             ; preserve ecx on the stack to be restored after function runs
        push    rdx             ; preserve edx on the stack to be restored after function runs
        push    rsi             ; preserve esi on the stack to be restored after function runs
        mov     esi, eax        ; move pointer in eax into esi (our number to convert)
        mov     eax, 0          ; initialise eax with decimal value 0
        mov     ecx, 0          ; initialise ecx with decimal value 0

%%_multiplyLoop:
        xor     ebx, ebx        ; resets both lower and uppper bytes of ebx to be 0
        mov     bl, [esi+ecx]   ; move a single byte into ebx register's lower half
        cmp     bl, 48          ; compare ebx register's lower half value against ascii value 48 (char value 0)
        jl      %%_finished       ; jump if less than to label finished
        cmp     bl, 57          ; compare ebx register's lower half value against ascii value 57 (char value 9)
        jg      %%_finished       ; jump if greater than to label finished
        cmp     bl, 10          ; compare ebx register's lower half value against ascii value 10 (linefeed character)
        je      %%_finished       ; jump if equal to label finished
        cmp     bl, 0           ; compare ebx register's lower half value against decimal value 0 (end of string)
        jz      %%_finished       ; jump if zero to label finished

        sub     bl, 48          ; convert ebx register's lower half to decimal representation of ascii value
        add     eax, ebx        ; add ebx to our interger value in eax
        mov     ebx, 10         ; move decimal value 10 into ebx
        mul     ebx             ; multiply eax by ebx to get place value
        inc     ecx             ; increment ecx (our counter register)
        jmp     %%_multiplyLoop   ; continue multiply loop

%%_finished:
        mov     ebx, 10         ; move decimal value 10 into ebx
        div     ebx             ; divide eax by value in ebx (in this case 10)
        pop     rsi             ; restore esi from the value we pushed onto the stack at the start
        pop     rdx             ; restore edx from the value we pushed onto the stack at the start
        pop     rcx             ; restore ecx from the value we pushed onto the stack at the start
        pop     rbx             ; restore ebx from the value we pushed onto the stack at the start
%endmacro
;---------------------------FIN DE MACRO--------------------------------------



;-------------------------  MACRO #15 ----------------------------------
;abre un archivo por medio de syscall, posee 3 parametros:
;1-registro de 64 bits que apunta al nombre del archivo (string que termina en 0)
;2-banderas: ya sea crear, crear y escribir, etc. (es un entero en decimal)
;3-permisos: entero en octal de 4 digitos (debe terminar en 'o' para indicar que es octal)
;dalbc
%macro openfile 3
        mov rax, 2
        mov rdi, %1
        mov rsi, %2
        mov rdx, %3
        syscall
%endmacro
;---------------------------FIN DE MACRO--------------------------------------



;-------------------------  MACRO #16 ----------------------------------
;permite escribir en un archivo, posee 3 parametros:
;1-registro que contiene el 'file descriptor', el macro 15 lo deja en rax
;2-texto que se va escribir en el archivo
;3-tamano del texto a escribir en el archivo
;dalbc
%macro writefile 3
        mov rdi, %1
        mov rax, 1
        mov rsi, %2
        mov rdx, %3
        syscall
%endmacro
;---------------------------FIN DE MACRO--------------------------------------



;-------------------------  MACRO #17 ----------------------------------
;macro para cerrar un archivo, recibe un parametro que es el registro que
;contiene el 'file descriptor', el macro 16 lo deja en rdi
;dalbc
%macro closefile 1
        mov rax, 3
        pop %1
        syscall
%endmacro
;---------------------------FIN DE MACRO--------------------------------------



;-------------------------  MACRO #18 ----------------------------------
;convierte un numero entero entre 0 y 100 a string/ascii, de modo que se
;puede mandar a escribir a un archivo de texto. el numero debe estar almacenado
;en rax antes de llamar al macro y el string se guarda en el unico parametro
;que recibe el macro, un string (db) de almenos 5 bytes. escribe un signo de
;porcentaje al final.
;dalbc
%macro filenum 1
        cmp rax, 100
        je %%_cien
        jmp %%_menor

%%_cien:
        mov rbx, 49
        mov [%1], rbx
        mov rbx, 48
        mov [%1+1], rbx
        mov rbx, 48
        mov [%1+2], rbx
        mov rbx, "%"
        mov [%1+3], rbx
        jmp %%_end

%%_menor:
        mov rcx, 10
        mov rdx, 0
        div rcx

        mov rbx, " "
        mov [%1], rbx

        cmp rax, 0
        je %%_cerodec

        add rax, 48
        mov rbx, rax
        mov [%1+1], rbx

%%_unid:
        add rdx, 48
        mov rbx, rdx
        mov [%1+2], rbx
        mov rbx, "%"
        mov [%1+3], rbx
        jmp %%_end

%%_cerodec:
        mov rbx, " "
        mov [%1+1], rbx
        jmp %%_unid


%%_end:
%endmacro
;---------------------------FIN DE MACRO--------------------------------------




;-------------------------  DIVLOOP  ----------------------------------
;Loop necesario para utilizar el macro printInt (MACRO 5)
        ; Loop de division necesario para el macro printInt
        divloop:
        xor rdx,rdx		; Zero out rdx (where our remainder goes after idiv)
        idiv rcx		; divide rax (the number) by 10 (the remainder is placed in rdx)
        add rdx,0x30	; add 0x30 to the remainder so we get the correct ASCII value
        dec rdi		; move the pointer backwards in the buffer
        mov byte [rdi],dl	; move the character into the buffer
        inc dword [rbp-4]	; increase the length

        cmp rax,0		; was the result zero?
        jnz divloop	; no it wasn't, keep looping

        mov rax,rdi		; rdi now points to the beginning of the string - move it into rax
        mov rcx,[rbp-4]	; rbp-4 contains the length - move it into rcx

        ret
