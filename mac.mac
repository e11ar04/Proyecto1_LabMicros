;;MACRO 1
;no recibe parametros
;es para terminar un programa x86_64
%macro exit 0
        mov rax, 60
        mov rdi, 0
        syscall
%endmacro


;MACRO 2
;no recibe parametros
;imprime el string que esta en rax antes de su llamado
;no importa el tamano del string mientras el ultimo caracter sea '0'
%macro printstring 0
%%_printstring:
        push rax
        mov rbx, 0

%%_printloop:
        inc rax
        inc rbx
        mov cl, [rax]
        cmp cl, 0
        jne %%_printloop

        mov rax, 1
        mov rdi, 1
        pop rsi
        mov rdx, rbx
        syscall
%endmacro

;MACRO 3
;recibe 2 parametros, el primero de 16 reserved bytes y el segundo de 8 reserved bytes
;imprime un numero entero de cualquier tamano
%macro printnum 2
%%_printnum:
        mov rcx, %1
        mov rbx, 10
        mov [rcx], rbx
        inc rcx
        mov [%2], rcx

%%_printnumloop:
        mov rdx, 0
        mov rbx, 10
        div rbx
        push rax
        add rdx, 48

        mov rcx, [%2]
        mov [rcx], dl
        inc rcx
        mov [%2], rcx

        pop rax
        cmp rax, 0
        jne %%_printnumloop

%%_printnumloop2:
        mov rcx, [%2]

        mov rax, 1
        mov rdi, 1
        mov rsi, rcx
        mov rdx, 1
        syscall

        mov rcx, [%2]
        dec rcx
        mov [%2], rcx

        cmp rcx, %1
        jge %%_printnumloop2
%endmacro

;MACRO 4
;al llamar este macro se guarda en eax la cantidad de nucleos del procesador
%macro cantnuc 0
        mov eax, 0xb
        mov ecx, 1
        cpuid
        mov r10d, ebx
        and ebx, 0x0000ffff
%endmacro
